<project xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:p="antlib:de.perdian.ant.webstart">

  <property name="project.directory" location="./" />
  <property name="build.target.directory" location="${project.directory}/build/" />
  <property name="build.version" value="SNAPTSHOT" />
  <property name="ivy.local.default.root" value="${build.target.directory}/repository/"/>

  <target name="init">
    <ivy:resolve file="${project.directory}/ivy.xml" log="quiet" />
  </target>

  <target name="clean">
    <mkdir dir="${build.target.directory}" />
    <delete includeemptydirs="true">
      <fileset dir="${build.target.directory}" />
    </delete>
  </target>

  <target name="compile" depends="init, clean">
    <ivy:cachepath pathid="classpath.compile" conf="compile" log="quiet" />
    <mkdir dir="${build.target.directory}/classes/main/" />
    <javac destdir="${build.target.directory}/classes/main/" includeantruntime="false" debug="true">
      <classpath refid="classpath.compile" />
      <src path="${project.directory}/src/main/java/" />
    </javac>
  </target>

  <target name="test" depends="compile">
<!--
    <ivy:cachepath pathid="classpath.test" conf="test" log="quiet" />
    <mkdir dir="${build.target.directory}/classes/test/" />
    <javac destdir="${build.target.directory}/classes/test/" includeantruntime="false" debug="true">
      <classpath>
        <path path="${build.target.directory}/classes/main/" />
        <path refid="classpath.test" />
      </classpath>
      <src path="${project.directory}/src/test/java/" />
    </javac>
    <copy todir="${build.target.directory}/classes/test/" overwrite="true">
      <fileset dir="${project.directory}/src/test/resources/" />
    </copy>

    <mkdir dir="${build.target.directory}/reports/junit/" />
    <junit printsummary="yes" haltonfailure="${build.haltontestfailures}">
      <classpath>
        <path path="${build.target.directory}/classes/test/" />
        <path path="${build.target.directory}/classes/main/" />
        <path refid="classpath.test" />
      </classpath>
      <formatter type="xml" />
      <batchtest todir="${build.target.directory}/reports/junit/">
        <fileset dir="${build.target.directory}/classes/test/">
          <include name="**/Test*.class"/>
        </fileset>
      </batchtest>
    </junit>
-->
  </target>

  <target name="jar" depends="compile">
    <mkdir dir="${build.target.directory}/jar/" />
    <jar destfile="${build.target.directory}/jar/${ivy.module}.jar">
      <fileset dir="${build.target.directory}/classes/main/" />
    </jar>
    <zip destfile="${build.target.directory}/jar/${ivy.module}-sources.jar">
      <fileset dir="${project.directory}/src/main/java/" />
    </zip>
  </target>

  <target name="build-lib" depends="jar, test">
  </target>

  <target name="distribute-lib" depends="build-lib">

    <mkdir dir="${build.target.directory}/distribution/lib/" />
    <copy todir="${build.target.directory}/distribution/lib/">
      <fileset dir="${build.target.directory}/jar/" />
      <fileset dir="${project.directory}/src/main/release/lib/" />
    </copy>

<!--
    Currently, there are not dependencies to be included in the distribution,
    so we can ignore the retrieve process here

    <mkdir dir="${build.target.directory}/distribution/lib/libs/" />
    <ivy:retrieve conf="lib" pattern="${build.target.directory}/distribution/lib/libs/[artifact].[ext]" />
-->

  </target>

  <target name="release-lib" depends="distribute-lib">

    <mkdir dir="${release.target.directory}/archive/" />
    <zip destfile="${release.target.directory}/archive/${ivy.module}-${ivy.revision}.zip">
      <fileset dir="${build.target.directory}/distribution/lib/" />
    </zip>

    <mkdir dir="${release.target.directory}/latest/" />
    <delete failonerror="false" includeemptydirs="true">
      <fileset dir="${release.target.directory}/latest/" />
    </delete>
    <zip destfile="${release.target.directory}/latest/${ivy.module}-${ivy.revision}.zip">
      <fileset dir="${build.target.directory}/distribution/lib/" />
    </zip>

  </target>

  <!--
    Publish the artifacts into the default anderScore artifactory repository.
    The URL, username and password must be made available as properties before
    the build script is executed. The following external properties must be
    defined:
    - publish.buildnumber
  -->
  <target name="publish-lib" depends="distribute-lib">

    <mkdir dir="${build.target.directory}/publish/" />
    <ivy:makepom ivyfile="${project.directory}/ivy.xml" pomfile="${build.target.directory}/publish/pom/${ivy.module}.pom"/>

    <jar destfile="${build.target.directory}/publish/jar/${ivy.module}.jar">
      <fileset dir="${build.target.directory}/classes/main/" />
    </jar>

    <zip destfile="${build.target.directory}/publish/source/${ivy.module}-sources.source">
      <fileset dir="${project.directory}/src/main/java/" />
    </zip>

    <property name="publish.revision" value="${ivy.revision}.${build.version}" />
    <ivy:publish resolver="local" overwrite="true" pubrevision="${publish.revision}">
      <artifacts pattern="${build.target.directory}/publish/[type]/[artifact](-[classifier]).[ext]" />
    </ivy:publish>

  </target>

  <target name="deploy-lib" depends="release-lib, publish-lib">
  </target>

</project>